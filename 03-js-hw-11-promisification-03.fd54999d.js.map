{"mappings":"AAAA,MAAMA,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAiBtDK,QAAQC,IAAIP,EAA0B,IAAK,MAE3C,MAAMQ,EAAyBC,GACtB,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAQb,EAA0B,IAAK,KACvCc,EAAaX,KAAKE,SAAW,GAEnCU,YAAW,KACLD,GACFH,EAAQF,EAAYO,GAAIH,GAG1BD,EAAOH,EAAYO,GAAG,GACrBH,EAAM,IAQb,SAASI,EAAWD,EAAIE,GACtBZ,QAAQC,IAAI,eAAeS,kBAAmBE,M,CAGhD,SAASC,EAASH,GAChBV,QAAQc,KAAK,gCAAgCJ,6B,CAiB/CR,EAAuB,CAAEQ,GAAI,GAAIK,OAAQ,MACtCC,KAAKL,GACLM,MAAMJ,GAETX,EAAuB,CAAEQ,GAAI,GAAIK,OAAQ,MACtCC,KAAKL,GACLM,MAAMJ,GAETX,EAAuB,CAAEQ,GAAI,GAAIK,OAAQ,KAAMC,KAAKL,GAAYM,MAAMJ,GAEtEX,EAAuB,CAAEQ,GAAI,GAAIK,OAAQ,MACtCC,KAAKL,GACLM,MAAMJ","sources":["src/js/03-promises-03.js"],"sourcesContent":["const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction, onSuccess, onError) => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  setTimeout(() => {\n    const canProcess = Math.random() > 0.3;\n\n    if (canProcess) {\n      onSuccess(transaction.id, delay);\n    } else {\n      onError(transaction.id);\n    }\n  }, delay);\n};\n\nconsole.log(randomIntegerFromInterval(200, 500));\n\nconst makeTransactionPromise = transaction => {\n  return new Promise((resolve, reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n    const canProcess = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (canProcess) {\n        resolve(transaction.id, delay);\n      }\n\n      reject(transaction.id);\n    }, delay);\n  });\n};\n\n// const logSuccess = (id, time) => {\n//   console.log(`Transaction ${id} processed in ${time}ms`);\n// };\n\nfunction logSuccess(id, time) {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n}\n\nfunction logError(id) {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n}\n\n// const logError = id => {\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\n// };\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransactionPromise({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransactionPromise({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransactionPromise({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransactionPromise({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);\n"],"names":["$462e7e2ee4e13914$var$randomIntegerFromInterval","min","max","Math","floor","random","console","log","$462e7e2ee4e13914$var$makeTransactionPromise","transaction","Promise","resolve","reject","delay","canProcess","setTimeout","id","$462e7e2ee4e13914$var$logSuccess","time","$462e7e2ee4e13914$var$logError","warn","amount","then","catch"],"version":3,"file":"03-js-hw-11-promisification-03.fd54999d.js.map"}
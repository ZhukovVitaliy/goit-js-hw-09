{"mappings":"YAAA,IAAMA,EAA4B,SAACC,EAAKC,GACtC,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,E,EAiBtDK,QAAQC,IAAIP,EAA0B,IAAK,MAE3C,IAAMQ,EAAyB,SAAAC,GAC7B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAQb,EAA0B,IAAK,KACvCc,EAAaX,KAAKE,SAAW,GAEnCU,YAAW,WACLD,GACFH,EAAQF,EAAYO,GAAIH,GAG1BD,EAAOH,EAAYO,G,GAClBH,E,KAQP,SAASI,EAAWD,EAAIE,GACtBZ,QAAQC,IAAI,eAAkCY,OAAnBH,EAAG,kBAAqBG,OAALD,EAAK,M,CAGrD,SAASE,EAASJ,GAChBV,QAAQe,KAAK,gCAAmCF,OAAHH,EAAG,6B,CAiBlDR,EAAuB,CAAEQ,GAAI,GAAIM,OAAQ,MACtCC,KAAKN,GACLO,MAAMJ,GAETZ,EAAuB,CAAEQ,GAAI,GAAIM,OAAQ,MACtCC,KAAKN,GACLO,MAAMJ,GAETZ,EAAuB,CAAEQ,GAAI,GAAIM,OAAQ,KAAMC,KAAKN,GAAYO,MAAMJ,GAEtEZ,EAAuB,CAAEQ,GAAI,GAAIM,OAAQ,MACtCC,KAAKN,GACLO,MAAMJ,E","sources":["src/js/03-promises-03.js"],"sourcesContent":["const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction, onSuccess, onError) => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  setTimeout(() => {\n    const canProcess = Math.random() > 0.3;\n\n    if (canProcess) {\n      onSuccess(transaction.id, delay);\n    } else {\n      onError(transaction.id);\n    }\n  }, delay);\n};\n\nconsole.log(randomIntegerFromInterval(200, 500));\n\nconst makeTransactionPromise = transaction => {\n  return new Promise((resolve, reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n    const canProcess = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (canProcess) {\n        resolve(transaction.id, delay);\n      }\n\n      reject(transaction.id);\n    }, delay);\n  });\n};\n\n// const logSuccess = (id, time) => {\n//   console.log(`Transaction ${id} processed in ${time}ms`);\n// };\n\nfunction logSuccess(id, time) {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n}\n\nfunction logError(id) {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n}\n\n// const logError = id => {\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\n// };\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransactionPromise({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransactionPromise({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransactionPromise({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransactionPromise({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);\n"],"names":["$fd030db925c8ea1b$var$randomIntegerFromInterval","min","max","Math","floor","random","console","log","$fd030db925c8ea1b$var$makeTransactionPromise","transaction","Promise","resolve","reject","delay","canProcess","setTimeout","id","$fd030db925c8ea1b$var$logSuccess","time","concat","$fd030db925c8ea1b$var$logError","warn","amount","then","catch"],"version":3,"file":"03-js-hw-11-promisification-03.c5d09a10.js.map"}